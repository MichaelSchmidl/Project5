/** Generated by YAKINDU Statechart Tools code generator. */

#ifndef STATECHART_H_
#define STATECHART_H_

#ifdef __cplusplus
extern "C" { 
#endif

/*!
* Forward declaration for the Statechart state machine.
*/
typedef struct Statechart Statechart;

/*!
* Forward declaration of the data structure for the StatechartIface interface scope.
*/
typedef struct StatechartIface StatechartIface;

/*!
* Forward declaration of the data structure for the StatechartTimeEvents interface scope.
*/
typedef struct StatechartTimeEvents StatechartTimeEvents;

#ifdef __cplusplus
}
#endif

#include "sc_types.h"
#include "sc_rxc.h"

#ifdef __cplusplus
extern "C" { 
#endif 

/*! \file Header of the state machine 'Statechart'.
*/

#ifndef STATECHART_EVENTQUEUE_BUFFERSIZE
#define STATECHART_EVENTQUEUE_BUFFERSIZE 20
#endif
#ifndef STATECHART_IN_EVENTQUEUE_BUFFERSIZE
#define STATECHART_IN_EVENTQUEUE_BUFFERSIZE STATECHART_EVENTQUEUE_BUFFERSIZE
#endif
#ifndef SC_INVALID_EVENT_VALUE
#define SC_INVALID_EVENT_VALUE 0
#endif
/*! Define number of states in the state enum */
#define STATECHART_STATE_COUNT 3

/*! Define dimension of the state configuration vector for orthogonal states. */
#define STATECHART_MAX_ORTHOGONAL_STATES 1
/*! Define maximum number of time events that can be active at once */
#define STATECHART_MAX_PARALLEL_TIME_EVENTS 2

/*! Define indices of states in the StateConfVector */
#define SCVI_STATECHART_MAIN_REGION_WAIT4BLE 0
#define SCVI_STATECHART_MAIN_REGION_SENDGREETING 0
#define SCVI_STATECHART_MAIN_REGION_AUTOSHUTDOWN 0


/*
 * Enum of event names in the statechart.
 */
typedef enum  {
	Statechart_invalid_event = SC_INVALID_EVENT_VALUE,
	Statechart_BLEconnected,
	Statechart_BLEdisconnected,
	Statechart_Touch1press,
	Statechart_Touch2press,
	Statechart_Touch3press,
	Statechart_RC5match,
	Statechart_GYROtilt,
	Statechart_KBDstrokeSent,
	Statechart_Statechart_main_region_sendGreeting_time_event_0,
	Statechart_Statechart_main_region_sendGreeting_time_event_1
} StatechartEventID;

/*
 * Struct that represents a single event.
 */
typedef struct {
	StatechartEventID name;
} statechart_event;

/*
 * Queue that holds the raised events.
 */
typedef struct statechart_eventqueue_s {
	statechart_event *events;
	sc_integer capacity;
	sc_integer pop_index;
	sc_integer push_index;
	sc_integer size;
} statechart_eventqueue;

/*! Enumeration of all states */ 
typedef enum
{
	Statechart_last_state,
	Statechart_main_region_wait4BLE,
	Statechart_main_region_sendGreeting,
	Statechart_main_region_autoShutdown
} StatechartStates;


/*! Type declaration of the data structure for the StatechartIface interface scope. */
struct StatechartIface
{
	sc_boolean BLEconnected_raised;
	sc_boolean BLEdisconnected_raised;
	sc_boolean Touch1press_raised;
	sc_boolean Touch2press_raised;
	sc_boolean Touch3press_raised;
	sc_boolean RC5match_raised;
	sc_boolean GYROtilt_raised;
	sc_boolean KBDstrokeSent_raised;
	sc_observable_sc_integer sendTLCbraille;
	sc_observable_sc_integer sendTLCmorse;
	sc_observable_sc_integer sendKBDstroke;
	sc_observable shutDown;
};



/*! Type declaration of the data structure for the StatechartTimeEvents interface scope. */
struct StatechartTimeEvents
{
	sc_boolean statechart_main_region_sendGreeting_tev0_raised;
	sc_boolean statechart_main_region_sendGreeting_tev1_raised;
};






/*! 
 * Type declaration of the data structure for the Statechart state machine.
 * This data structure has to be allocated by the client code. 
 */
struct Statechart
{
	StatechartStates stateConfVector[STATECHART_MAX_ORTHOGONAL_STATES];
	sc_ushort stateConfVectorPosition; 
	StatechartIface iface;
	StatechartTimeEvents timeEvents;
	sc_boolean isExecuting;
	statechart_eventqueue in_event_queue;
	statechart_event in_buffer[STATECHART_IN_EVENTQUEUE_BUFFERSIZE];
};



/*! Initializes the Statechart state machine data structures. Must be called before first usage.*/
extern void statechart_init(Statechart* handle);


/*! Activates the state machine. */
extern void statechart_enter(Statechart* handle);

/*! Deactivates the state machine. */
extern void statechart_exit(Statechart* handle);



/*! Raises a time event. */
extern void statechart_raise_time_event(Statechart* handle, sc_eventid evid);

/*! Raises the in event 'BLEconnected' that is defined in the default interface scope. */ 
extern void statechart_raise_bLEconnected(Statechart* handle);
/*! Raises the in event 'BLEdisconnected' that is defined in the default interface scope. */ 
extern void statechart_raise_bLEdisconnected(Statechart* handle);
/*! Raises the in event 'Touch1press' that is defined in the default interface scope. */ 
extern void statechart_raise_touch1press(Statechart* handle);
/*! Raises the in event 'Touch2press' that is defined in the default interface scope. */ 
extern void statechart_raise_touch2press(Statechart* handle);
/*! Raises the in event 'Touch3press' that is defined in the default interface scope. */ 
extern void statechart_raise_touch3press(Statechart* handle);
/*! Raises the in event 'RC5match' that is defined in the default interface scope. */ 
extern void statechart_raise_rC5match(Statechart* handle);
/*! Raises the in event 'GYROtilt' that is defined in the default interface scope. */ 
extern void statechart_raise_gYROtilt(Statechart* handle);
/*! Raises the in event 'KBDstrokeSent' that is defined in the default interface scope. */ 
extern void statechart_raise_kBDstrokeSent(Statechart* handle);
/*! Returns the observable for the out event 'sendTLCbraille' that is defined in the default interface scope. */ 
extern sc_observable_sc_integer* statechart_get_sendTLCbraille(Statechart* handle);

/*! Returns the observable for the out event 'sendTLCmorse' that is defined in the default interface scope. */ 
extern sc_observable_sc_integer* statechart_get_sendTLCmorse(Statechart* handle);

/*! Returns the observable for the out event 'sendKBDstroke' that is defined in the default interface scope. */ 
extern sc_observable_sc_integer* statechart_get_sendKBDstroke(Statechart* handle);

/*! Returns the observable for the out event 'shutDown' that is defined in the default interface scope. */ 
extern sc_observable* statechart_get_shutDown(Statechart* handle);


/*!
 * Checks whether the state machine is active (until 2.4.1 this method was used for states).
 * A state machine is active if it was entered. It is inactive if it has not been entered at all or if it has been exited.
 */
extern sc_boolean statechart_is_active(const Statechart* handle);

/*!
 * Checks if all active states are final. 
 * If there are no active states then the state machine is considered being inactive. In this case this method returns false.
 */
extern sc_boolean statechart_is_final(const Statechart* handle);

/*! Checks if the specified state is active (until 2.4.1 the used method for states was called isActive()). */
extern sc_boolean statechart_is_state_active(const Statechart* handle, StatechartStates state);


#ifdef __cplusplus
}
#endif 

#endif /* STATECHART_H_ */
